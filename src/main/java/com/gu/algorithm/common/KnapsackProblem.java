package com.gu.algorithm.common;


/**
 * 动态规划算法
 * <p>
 * 1) 动态规划(Dynamic Programming)算法的核心思想是： 将大问题划分为小问题进行解决， 从而一步步获取最优解
 * 的处理算法
 * 2) 动态规划算法与分治算法类似， 其基本思想也是将待求解问题分解成若干个子问题， 先求解子问题， 然后从这
 * 些子问题的解得到原问题的解。
 * 3) 与分治法不同的是， 适合于用动态规划求解的问题， 经分解得到子问题往往不是互相独立的。 ( 即下一个子
 * 阶段的求解是建立在上一个子阶段的解的基础上， 进行进一步的求解 )
 * 4) 动态规划可以通过填表的方式来逐步推进， 得到最优解.
 *
 * @author gu
 * @create 2020/12/11 下午2:09
 */
public class KnapsackProblem {

    public static void main(String[] args) {
        //物品的重量
        int[] w = {1, 4, 3};
        //物品的价值 这里 val[i] 就是前面讲的 v[i]
        int[] val = {1500, 3000, 2000};
        //背包的容量
        int m = 4;
        //物品的个数
        int n = val.length;
        //v[i][j] 表示在前 i 个物品中能够装入容量为 j 的背包中的最大价值
        int[][] v = new int[n + 1][m + 1];
        //为了记录放入商品的情况，我们定一个二维数组
        int[][] path = new int[n + 1][m + 1];
        //初始化第一行和第一列, 这里在本程序中，可以不去处理，因为默认就是 0
        for (int i = 0; i < v.length; i++) {
            v[i][0] = 0;
            v[0][i] = 0;
        }
        //不处理第一行 i 是从 1 开始的
        for (int i = 1; i < v.length; i++) {
            //不处理第一列, j 是从 1 开始的
            for (int j = 1; j < v[0].length; j++) {

            }
        }
    }


}
